AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: ChefConnect Lambda + API Gateway

Parameters:
  ProjectName:
    Type: String
    Default: ChefConnect
    Description: Project name, to be used for labeling and  tagging
  Environment:
    Type: String
    AllowedValues: [prod, dev]
    Default: dev
    Description: Target deployment environment. Defaults to "dev".
  Domain:
    Type: String
    Description: The domain name to associate with the API Gateway deployment.
  SubnetIdList:
    Type: List<String>
    Description: Exactly two comma-separated subnets that the Lambda should deploy within.
  SecurityGroup:
    Type: String
    Description: The security group to associate with the Lambda.
  DbHost:
    Type: String
    Default: ip-172-31-12-209.ec2.internal
    Description: Private EC2 IP address for the dgraph DB.
  DbPort:
    Type: String
    Default: 9080
    Description: Port for the dgraph DB.
  DgraphAuthToken:
    Type: String
    Description: Auth token for the dgraph server
  TokenExpiry:
    Type: Number
    Description: Life duration of a JWT, in seconds
    Default: 600
  RefreshTokenLength:
    Type: Number
    Description: Length of the refresh token, used to obtain a new JWT
    Default: 40
  JwtSecretKey:
    Type: String
    Description: The secret used for generating JWT HMACs
    Default: "youllneverguessme"

Globals:
  Function:
    Runtime: go1.x
    Environment:
      Variables:
        IS_LAMBDA: true
        DB_HOST: !Ref DbHost
        DB_PORT: !Ref DbPort
        DB_TOKEN: !Ref DgraphAuthToken
        DOMAIN: !Ref Domain
        SECRET_KEY: !Ref JwtSecretKey
        TOKEN_EXPIRY: !Ref TokenExpiry
        REFRESH_TOKEN_LEN: !Ref RefreshTokenLength
        AUTH_TOKEN_HEADER_NAME: "Authorization"
    VpcConfig:
      SubnetIds:
        - !Select [0, !Ref SubnetIdList]
        - !Select [1, !Ref SubnetIdList]
      SecurityGroupIds:
        - !Ref SecurityGroup
    Tags:
      Project: !Ref ProjectName

Resources:

  ###
  # Golang API Resources
  ###

  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: EDGE
      Tags:
        Project: !Ref ProjectName

  # authn requests require a large amount of memory to complete in a timely
  # manner due to the hashing that occurs. create a separate lambda with
  # much higher resource allocation for handling these requests.
  ServerlessAuthnLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChefConnect-Authn
      CodeUri: function.zip
      Handler: chefconnect
      Timeout: 10
      MemorySize: 1024
      Role: !GetAtt LambdaRole.Arn
      Events:
        ProxyRequest:
          Type: Api
          Properties:
            Path: "/auth/login"
            Method: any
            RestApiId: !Ref ServerlessRestApi

  ServerlessLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChefConnect
      CodeUri: function.zip
      Handler: chefconnect
      Timeout: 10
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Events:
        ProxyRequest:
          Type: Api
          Properties:
            Path: "/{proxy+}"
            Method: any
            RestApiId: !Ref ServerlessRestApi

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/ChefConnect"
      RetentionInDays: 5
  
  AuthnLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/ChefConnect-Authn"
      RetentionInDays: 5

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ServerlessLambda
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: !Ref Environment
      StageName: !Ref Environment

  CustomAPIDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref Domain
      EndpointConfiguration:
        Types:
          - EDGE
      CertificateArn: arn:aws:acm:us-east-1:178067731538:certificate/703adec2-085e-4311-860d-481d4589f79d

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ServerlessRestApi
      - ApiDeployment
    Properties:
      DomainName: !Ref Domain
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref Environment
      # this is required to allow for successful deletion by CFN
      # ref: https://github.com/hashicorp/terraform/issues/9212
      BasePath: "(none)"

  APIRoute53Entry:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CustomAPIDomain.DistributionDomainName
        HostedZoneId: !GetAtt CustomAPIDomain.DistributionHostedZoneId
      HostedZoneId: Z04564473TXYVWUJFRVM3
      Name: !Ref Domain
      Type: A

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: chefconnect-service-role
      ManagedPolicyArns:
        - Ref: LambdaRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  LambdaRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow ODTP Lab Manager Infrastructure to access the resources created by this template.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: 
              - !GetAtt LambdaLogGroup.Arn
              - !GetAtt AuthnLambdaLogGroup.Arn

Outputs:
  Domain:
    Value: !Ref Domain
