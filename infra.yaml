AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: ChefConnect VPC + SGs

Parameters:
  ProjectName:
    Type: String
    Default: ChefConnect
    Description: Project name, to be used for tagging
  Environment:
    Type: String
    AllowedValues: [prod, dev]
    Default: dev
    Description: Target deployment environment. Defaults to "dev".
  VpcBlock:
    Type: String
    Default: "172.20.1.0/16"
    Description: CIDR block for the VPC.
  SubnetBlocks:
    Type: CommaDelimitedList
    Default: "172.20.1.0/24, 172.20.2.0/24, 172.20.3.0/24"
    Description: List of 3 CIDR blocks for each subnet.
  DatabaseSgId:
    Type: String
    Default: "sg-0a8152dc68b10c5e4"
    Description: The database EC2 server SG. An ingress rule will be created, allowing Lambdas to interact with it.

Resources:
  InfraVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  NATGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPAllocation.AllocationId
      SubnetId: !Ref PublicSubnet01

  EIPAllocation:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: "vpc"

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref InfraVpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InfraVpc

  PublicRoute:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: !Select [0, !Ref SubnetBlocks]
      VpcId: !Ref InfraVpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: !Select [1, !Ref SubnetBlocks]
      VpcId: !Ref InfraVpc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock: !Select [2, !Ref SubnetBlocks]
      VpcId: !Ref InfraVpc
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the VPC-attached Lambda
      GroupName: ChefConenctLambdaSG
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      VpcId: !Ref InfraVpc
      Tags:
        - Key: Project
          Value: !Ref ProjectName

Outputs:
  LambdaSecurityGroup:
    Description: The SG attached to the Lambdas
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: LambdaSecurityGroup
  PrivateSubnetIdList:
    Description: Subnets used by the Lambda VPC
    Value: !Join
      - ","
      - - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
    Export:
      Name: SubnetIdList
  PublicEip:
    Description: The public IP associated with the NAT instance. All Lambda outbound traffic will originate from this IP address.
    Value: !Ref EIPAllocation
