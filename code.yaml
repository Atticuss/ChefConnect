AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: ChefConnect Lambda + API Gateway

Parameters:
  ProjectName:
    Type: String
    Default: ChefConnect
    Description: Project name, to be used for labeling and  tagging
  Environment:
    Type: String
    AllowedValues: [prod, dev]
    Default: dev
    Description: Target deployment environment. Defaults to "dev".
  SubnetIdList:
    Type: List<String>
    Description: Exactly three comma-separated subnets that the Lambda should deploy within.
  SecurityGroup:
    Type: String
    Description: The security group to associate with the Lambda.
  DbHost:
    Type: String
    Default: ip-172-31-12-209.ec2.internal
    Description: Private EC2 IP address for the dgraph DB.
  DbPort:
    Type: String
    Default: 9080
    Description: Port for the dgraph DB.
  DgraphAuthToken:
    Type: String
    Description: Auth token for the dgraph server

Mappings:
  EnvMap:
    dev:
      domain: api.dev.recipes.veraciousdata.io
    prod:
      domain: api.recipes.veraciousdata.io

Globals:
  Function:
    Timeout: 10

Resources:
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: EDGE
      Tags:
        Project: !Ref ProjectName

  ServerlessLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref ProjectName
      Runtime: go1.x
      Handler: bin/main
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Select [0, !Ref SubnetIdList]
          - !Select [1, !Ref SubnetIdList]
          - !Select [2, !Ref SubnetIdList]
        SecurityGroupIds:
          - !Ref SecurityGroup
      Environment:
        Variables:
          IS_LAMBDA: true
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          DB_TOKEN: !Ref DgraphAuthToken
          DOMAIN: !FindInMap [EnvMap, !Ref Environment, domain]
      Events:
        ProxyRequest:
          Type: Api
          Properties:
            Path: "/{proxy+}"
            Method: any
            RestApiId: !Ref ServerlessRestApi
      Tags:
        Project: !Ref ProjectName

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}"
      RetentionInDays: 5

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ServerlessLambda
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: !Ref Environment
      StageName: !Ref Environment

  CustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !FindInMap [EnvMap, !Ref Environment, domain]
      EndpointConfiguration:
        Types:
          - EDGE
      CertificateArn: arn:aws:acm:us-east-1:178067731538:certificate/703adec2-085e-4311-860d-481d4589f79d

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ServerlessRestApi
      - ApiDeployment
    Properties:
      DomainName: !FindInMap [EnvMap, !Ref Environment, domain]
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref Environment
      # this is required to allow for successful deletion by CFN
      # ref: https://github.com/hashicorp/terraform/issues/9212
      BasePath: "(none)"

  Route53Entry:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CustomDomain.DistributionDomainName
        HostedZoneId: !GetAtt CustomDomain.DistributionHostedZoneId
      HostedZoneId: Z04564473TXYVWUJFRVM3
      Name: !FindInMap [EnvMap, !Ref Environment, domain]
      Type: A

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: chefconnect-service-role
      ManagedPolicyArns:
        - Ref: LambdaRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  LambdaRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow ODTP Lab Manager Infrastructure to access the resources created by this template.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt LambdaLogGroup.Arn

Outputs:
  Endpoint:
    Value: !FindInMap [EnvMap, !Ref Environment, domain]

  Deployment:
    Value: !GetAtt CustomDomain.DistributionDomainName
