[{"Name":"ConferenceClient","SourceText":"// <auto-generated/>\n#nullable enable\n\nnamespace Frontend.GraphQL\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientResult : global::System.IEquatable<AddIngredientResult>, IAddIngredientResult\r\n    {\r\n        public AddIngredientResult(global::Frontend.GraphQL.IAddIngredient_AddIngredient? addIngredient)\r\n        {\r\n            AddIngredient = addIngredient;\r\n        }\r\n\r\n        public global::Frontend.GraphQL.IAddIngredient_AddIngredient? AddIngredient { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddIngredientResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (((AddIngredient is null && other.AddIngredient is null) || AddIngredient != null && AddIngredient.Equals(other.AddIngredient)));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddIngredientResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (AddIngredient != null)\r\n                {\r\n                    hash ^= 397 * AddIngredient.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredient_AddIngredient_AddIngredientPayload : global::System.IEquatable<AddIngredient_AddIngredient_AddIngredientPayload>, IAddIngredient_AddIngredient_AddIngredientPayload\r\n    {\r\n        public AddIngredient_AddIngredient_AddIngredientPayload(global::System.Int32? numUids)\r\n        {\r\n            NumUids = numUids;\r\n        }\r\n\r\n        public global::System.Int32? NumUids { get; }\r\n\r\n        public virtual global::System.Boolean Equals(AddIngredient_AddIngredient_AddIngredientPayload? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (NumUids == other.NumUids);\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((AddIngredient_AddIngredient_AddIngredientPayload)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (NumUids != null)\r\n                {\r\n                    hash ^= 397 * NumUids.GetHashCode();\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IAddIngredientResult\r\n    {\r\n        public global::Frontend.GraphQL.IAddIngredient_AddIngredient? AddIngredient { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IAddIngredient_AddIngredient\r\n    {\r\n        public global::System.Int32? NumUids { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IAddIngredient_AddIngredient_AddIngredientPayload : IAddIngredient_AddIngredient\r\n    {\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredientsResult : global::System.IEquatable<GetIngredientsResult>, IGetIngredientsResult\r\n    {\r\n        public GetIngredientsResult(global::System.Collections.Generic.IReadOnlyList<global::Frontend.GraphQL.IGetIngredients_QueryIngredient?>? queryIngredient)\r\n        {\r\n            QueryIngredient = queryIngredient;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Frontend.GraphQL.IGetIngredients_QueryIngredient?>? QueryIngredient { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetIngredientsResult? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(QueryIngredient, other.QueryIngredient));\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetIngredientsResult)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                if (QueryIngredient != null)\r\n                {\r\n                    foreach (var QueryIngredient_elm in QueryIngredient)\r\n                    {\r\n                        if (QueryIngredient_elm != null)\r\n                        {\r\n                            hash ^= 397 * QueryIngredient_elm.GetHashCode();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredients_QueryIngredient_Ingredient : global::System.IEquatable<GetIngredients_QueryIngredient_Ingredient>, IGetIngredients_QueryIngredient_Ingredient\r\n    {\r\n        public GetIngredients_QueryIngredient_Ingredient(global::System.String id, global::System.String name)\r\n        {\r\n            Id = id;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.String Id { get; }\r\n\r\n        public global::System.String Name { get; }\r\n\r\n        public virtual global::System.Boolean Equals(GetIngredients_QueryIngredient_Ingredient? other)\r\n        {\r\n            if (ReferenceEquals(null, other))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, other))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (other.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return (Id.Equals(other.Id)) && Name.Equals(other.Name);\r\n        }\r\n\r\n        public override global::System.Boolean Equals(global::System.Object? obj)\r\n        {\r\n            if (ReferenceEquals(null, obj))\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if (ReferenceEquals(this, obj))\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if (obj.GetType() != GetType())\r\n            {\r\n                return false;\r\n            }\r\n\r\n            return Equals((GetIngredients_QueryIngredient_Ingredient)obj);\r\n        }\r\n\r\n        public override global::System.Int32 GetHashCode()\r\n        {\r\n            unchecked\r\n            {\r\n                int hash = 5;\r\n                hash ^= 397 * Id.GetHashCode();\r\n                hash ^= 397 * Name.GetHashCode();\r\n                return hash;\r\n            }\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IGetIngredientsResult\r\n    {\r\n        public global::System.Collections.Generic.IReadOnlyList<global::Frontend.GraphQL.IGetIngredients_QueryIngredient?>? QueryIngredient { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IGetIngredients_QueryIngredient\r\n    {\r\n        public global::System.String Id { get; }\r\n\r\n        public global::System.String Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IGetIngredients_QueryIngredient_Ingredient : IGetIngredients_QueryIngredient\r\n    {\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the operation service of the AddIngredient GraphQL operation\n    /// <code>\n    /// mutation AddIngredient {\n    ///   addIngredient(input: { name: \"Tomato\" }) {\n    ///     __typename\n    ///     numUids\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientMutationDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private AddIngredientMutationDocument()\r\n        {\r\n        }\r\n\r\n        public static AddIngredientMutationDocument Instance { get; } = new AddIngredientMutationDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x22, 0x54, 0x6f, 0x6d, 0x61, 0x74, 0x6f, 0x22, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x55, 0x69, 0x64, 0x73, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"c3cf78c720736739fdfa77dcc6a6a0f3\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the operation service of the AddIngredient GraphQL operation\n    /// <code>\n    /// mutation AddIngredient {\n    ///   addIngredient(input: { name: \"Tomato\" }) {\n    ///     __typename\n    ///     numUids\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientMutation : global::Frontend.GraphQL.IAddIngredientMutation\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IAddIngredientResult> _operationExecutor;\r\n        public AddIngredientMutation(global::StrawberryShake.IOperationExecutor<IAddIngredientResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddIngredientResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddIngredientResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddIngredientResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: AddIngredientMutationDocument.Instance.Hash.Value, name: \"AddIngredient\", document: AddIngredientMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the operation service of the AddIngredient GraphQL operation\n    /// <code>\n    /// mutation AddIngredient {\n    ///   addIngredient(input: { name: \"Tomato\" }) {\n    ///     __typename\n    ///     numUids\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IAddIngredientMutation : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddIngredientResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddIngredientResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the operation service of the GetIngredients GraphQL operation\n    /// <code>\n    /// query GetIngredients {\n    ///   queryIngredient(order: { asc: name }) {\n    ///     __typename\n    ///     id\n    ///     name\n    ///     ... on Ingredient {\n    ///       id\n    ///     }\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredientsQueryDocument : global::StrawberryShake.IDocument\r\n    {\r\n        private GetIngredientsQueryDocument()\r\n        {\r\n        }\r\n\r\n        public static GetIngredientsQueryDocument Instance { get; } = new GetIngredientsQueryDocument();\r\n        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;\r\n        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x28, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x7b, 0x20, 0x61, 0x73, 0x63, 0x3a, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};\r\n        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash(\"md5Hash\", \"9845b2b68d870687dce04f0290c16905\");\r\n        public override global::System.String ToString()\r\n        {\r\n#if NETSTANDARD2_0\r\n        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());\n#else\r\n            return global::System.Text.Encoding.UTF8.GetString(Body);\r\n#endif\r\n        }\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the operation service of the GetIngredients GraphQL operation\n    /// <code>\n    /// query GetIngredients {\n    ///   queryIngredient(order: { asc: name }) {\n    ///     __typename\n    ///     id\n    ///     name\n    ///     ... on Ingredient {\n    ///       id\n    ///     }\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredientsQuery : global::Frontend.GraphQL.IGetIngredientsQuery\r\n    {\r\n        private readonly global::StrawberryShake.IOperationExecutor<IGetIngredientsResult> _operationExecutor;\r\n        public GetIngredientsQuery(global::StrawberryShake.IOperationExecutor<IGetIngredientsResult> operationExecutor)\r\n        {\r\n            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetIngredientsResult);\r\n        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetIngredientsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)\r\n        {\r\n            var request = CreateRequest();\r\n            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);\r\n        }\r\n\r\n        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetIngredientsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)\r\n        {\r\n            var request = CreateRequest();\r\n            return _operationExecutor.Watch(request, strategy);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest()\r\n        {\r\n            return CreateRequest(null);\r\n        }\r\n\r\n        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return new global::StrawberryShake.OperationRequest(id: GetIngredientsQueryDocument.Instance.Hash.Value, name: \"GetIngredients\", document: GetIngredientsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);\r\n        }\r\n\r\n        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)\r\n        {\r\n            return CreateRequest();\r\n        }\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the operation service of the GetIngredients GraphQL operation\n    /// <code>\n    /// query GetIngredients {\n    ///   queryIngredient(order: { asc: name }) {\n    ///     __typename\n    ///     id\n    ///     name\n    ///     ... on Ingredient {\n    ///       id\n    ///     }\n    ///   }\n    /// }\n    /// </code>\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IGetIngredientsQuery : global::StrawberryShake.IOperationRequestFactory\r\n    {\r\n        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetIngredientsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);\r\n        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetIngredientsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the ConferenceClient GraphQL client\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class ConferenceClient : global::Frontend.GraphQL.IConferenceClient\r\n    {\r\n        private readonly global::Frontend.GraphQL.IAddIngredientMutation _addIngredient;\r\n        private readonly global::Frontend.GraphQL.IGetIngredientsQuery _getIngredients;\r\n        public ConferenceClient(global::Frontend.GraphQL.IAddIngredientMutation addIngredient, global::Frontend.GraphQL.IGetIngredientsQuery getIngredients)\r\n        {\r\n            _addIngredient = addIngredient ?? throw new global::System.ArgumentNullException(nameof(addIngredient));\r\n            _getIngredients = getIngredients ?? throw new global::System.ArgumentNullException(nameof(getIngredients));\r\n        }\r\n\r\n        public static global::System.String ClientName => \"ConferenceClient\";\r\n        public global::Frontend.GraphQL.IAddIngredientMutation AddIngredient => _addIngredient;\r\n        public global::Frontend.GraphQL.IGetIngredientsQuery GetIngredients => _getIngredients;\r\n    }\r\n\r\n    /// <summary>\n    /// Represents the ConferenceClient GraphQL client\n    /// </summary>\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public interface IConferenceClient\r\n    {\r\n        global::Frontend.GraphQL.IAddIngredientMutation AddIngredient { get; }\r\n\r\n        global::Frontend.GraphQL.IGetIngredientsQuery GetIngredients { get; }\r\n    }\r\n}\r\n\r\nnamespace Frontend.GraphQL.State\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class IngredientEntity\r\n    {\r\n        public IngredientEntity(global::System.String id = default !, global::System.String name = default !)\r\n        {\r\n            Id = id;\r\n            Name = name;\r\n        }\r\n\r\n        public global::System.String Id { get; }\r\n\r\n        public global::System.String Name { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.AddIngredientResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public AddIngredientResultFactory(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Frontend.GraphQL.IAddIngredientResult);\r\n        public AddIngredientResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is AddIngredientResultInfo info)\r\n            {\r\n                return new AddIngredientResult(MapIAddIngredient_AddIngredient(info.AddIngredient, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"AddIngredientResultInfo expected.\");\r\n        }\r\n\r\n        private global::Frontend.GraphQL.IAddIngredient_AddIngredient? MapIAddIngredient_AddIngredient(global::Frontend.GraphQL.State.AddIngredientPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (data is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            IAddIngredient_AddIngredient returnValue = default !;\r\n            if (data?.__typename.Equals(\"AddIngredientPayload\", global::System.StringComparison.Ordinal) ?? false)\r\n            {\r\n                returnValue = new AddIngredient_AddIngredient_AddIngredientPayload(data.NumUids);\r\n            }\r\n            else\r\n            {\r\n                throw new global::System.NotSupportedException();\r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public AddIngredientResultInfo(global::Frontend.GraphQL.State.AddIngredientPayloadData? addIngredient, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            AddIngredient = addIngredient;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::Frontend.GraphQL.State.AddIngredientPayloadData? AddIngredient { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new AddIngredientResultInfo(AddIngredient, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredientsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.GetIngredientsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityMapper<global::Frontend.GraphQL.State.IngredientEntity, GetIngredients_QueryIngredient_Ingredient> _getIngredients_QueryIngredient_IngredientFromIngredientEntityMapper;\r\n        public GetIngredientsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Frontend.GraphQL.State.IngredientEntity, GetIngredients_QueryIngredient_Ingredient> getIngredients_QueryIngredient_IngredientFromIngredientEntityMapper)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _getIngredients_QueryIngredient_IngredientFromIngredientEntityMapper = getIngredients_QueryIngredient_IngredientFromIngredientEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getIngredients_QueryIngredient_IngredientFromIngredientEntityMapper));\r\n        }\r\n\r\n        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Frontend.GraphQL.IGetIngredientsResult);\r\n        public GetIngredientsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            if (dataInfo is GetIngredientsResultInfo info)\r\n            {\r\n                return new GetIngredientsResult(MapIGetIngredients_QueryIngredientArray(info.QueryIngredient, snapshot));\r\n            }\r\n\r\n            throw new global::System.ArgumentException(\"GetIngredientsResultInfo expected.\");\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::Frontend.GraphQL.IGetIngredients_QueryIngredient?>? MapIGetIngredients_QueryIngredientArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (list is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var ingredients = new global::System.Collections.Generic.List<global::Frontend.GraphQL.IGetIngredients_QueryIngredient?>();\r\n            foreach (global::StrawberryShake.EntityId? child in list)\r\n            {\r\n                ingredients.Add(MapIGetIngredients_QueryIngredient(child, snapshot));\r\n            }\r\n\r\n            return ingredients;\r\n        }\r\n\r\n        private global::Frontend.GraphQL.IGetIngredients_QueryIngredient? MapIGetIngredients_QueryIngredient(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)\r\n        {\r\n            if (entityId is null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (entityId.Value.Name.Equals(\"Ingredient\", global::System.StringComparison.Ordinal))\r\n            {\r\n                return _getIngredients_QueryIngredient_IngredientFromIngredientEntityMapper.Map(snapshot.GetEntity<global::Frontend.GraphQL.State.IngredientEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)\r\n        {\r\n            return Create(dataInfo, snapshot);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredientsResultInfo : global::StrawberryShake.IOperationResultDataInfo\r\n    {\r\n        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;\r\n        private readonly global::System.UInt64 _version;\r\n        public GetIngredientsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? queryIngredient, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)\r\n        {\r\n            QueryIngredient = queryIngredient;\r\n            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));\r\n            _version = version;\r\n        }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? QueryIngredient { get; }\r\n\r\n        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;\r\n        public global::System.UInt64 Version => _version;\r\n        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)\r\n        {\r\n            return new GetIngredientsResultInfo(QueryIngredient, _entityIds, version);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredients_QueryIngredient_IngredientFromIngredientEntityMapper : global::StrawberryShake.IEntityMapper<global::Frontend.GraphQL.State.IngredientEntity, GetIngredients_QueryIngredient_Ingredient>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        public GetIngredients_QueryIngredient_IngredientFromIngredientEntityMapper(global::StrawberryShake.IEntityStore entityStore)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n        }\r\n\r\n        public GetIngredients_QueryIngredient_Ingredient Map(global::Frontend.GraphQL.State.IngredientEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)\r\n        {\r\n            if (snapshot is null)\r\n            {\r\n                snapshot = _entityStore.CurrentSnapshot;\r\n            }\r\n\r\n            return new GetIngredients_QueryIngredient_Ingredient(entity.Id, entity.Name);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IAddIngredientResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IAddIngredientResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;\r\n        public AddIngredientBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IAddIngredientResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>(\"Int\") ?? throw new global::System.ArgumentException(\"No serializer for type `Int` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IAddIngredientResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IAddIngredientResult Result, AddIngredientResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IAddIngredientResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IAddIngredientResult, AddIngredientResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new AddIngredientResultInfo(DeserializeIAddIngredient_AddIngredient(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"addIngredient\")), entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::Frontend.GraphQL.State.AddIngredientPayloadData? DeserializeIAddIngredient_AddIngredient(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var typename = obj.Value.GetProperty(\"__typename\").GetString();\r\n            if (typename?.Equals(\"AddIngredientPayload\", global::System.StringComparison.Ordinal) ?? false)\r\n            {\r\n                return new global::Frontend.GraphQL.State.AddIngredientPayloadData(typename, numUids: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"numUids\")));\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return _intParser.Parse(obj.Value.GetInt32()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class GetIngredientsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IGetIngredientsResult>\r\n    {\r\n        private readonly global::StrawberryShake.IEntityStore _entityStore;\r\n        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;\r\n        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IGetIngredientsResult> _resultDataFactory;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;\r\n        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;\r\n        public GetIngredientsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IGetIngredientsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)\r\n        {\r\n            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));\r\n            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));\r\n            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));\r\n            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"ID\") ?? throw new global::System.ArgumentException(\"No serializer for type `ID` found.\");\r\n            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>(\"String\") ?? throw new global::System.ArgumentException(\"No serializer for type `String` found.\");\r\n        }\r\n\r\n        public global::StrawberryShake.IOperationResult<IGetIngredientsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)\r\n        {\r\n            (IGetIngredientsResult Result, GetIngredientsResultInfo Info)? data = null;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;\r\n            if (response.Exception is null)\r\n            {\r\n                try\r\n                {\r\n                    if (response.Body != null)\r\n                    {\r\n                        if (response.Body.RootElement.TryGetProperty(\"data\", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)\r\n                        {\r\n                            data = BuildData(dataElement);\r\n                        }\r\n\r\n                        if (response.Body.RootElement.TryGetProperty(\"errors\", out global::System.Text.Json.JsonElement errorsElement))\r\n                        {\r\n                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);\r\n                        }\r\n                    }\r\n                }\r\n                catch (global::System.Exception ex)\r\n                {\r\n                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n                }\r\n            }\r\n            else\r\n            {\r\n                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{\"body\", response.Body?.RootElement.ToString()}})};\r\n            }\r\n\r\n            return new global::StrawberryShake.OperationResult<IGetIngredientsResult>(data?.Result, data?.Info, _resultDataFactory, errors);\r\n        }\r\n\r\n        private (IGetIngredientsResult, GetIngredientsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();\r\n            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;\r\n            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? queryIngredientId = default !;\r\n            _entityStore.Update(session =>\r\n            {\r\n                queryIngredientId = UpdateIGetIngredients_QueryIngredientEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"queryIngredient\"), entityIds);\r\n                snapshot = session.CurrentSnapshot;\r\n            });\r\n            var resultInfo = new GetIngredientsResultInfo(queryIngredientId, entityIds, snapshot.Version);\r\n            return (_resultDataFactory.Create(resultInfo), resultInfo);\r\n        }\r\n\r\n        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetIngredients_QueryIngredientEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            var ingredients = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();\r\n            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())\r\n            {\r\n                ingredients.Add(UpdateIGetIngredients_QueryIngredientEntity(session, child, entityIds));\r\n            }\r\n\r\n            return ingredients;\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId? UpdateIGetIngredients_QueryIngredientEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);\r\n            entityIds.Add(entityId);\r\n            if (entityId.Name.Equals(\"Ingredient\", global::System.StringComparison.Ordinal))\r\n            {\r\n                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Frontend.GraphQL.State.IngredientEntity? entity))\r\n                {\r\n                    session.SetEntity(entityId, new global::Frontend.GraphQL.State.IngredientEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n                else\r\n                {\r\n                    session.SetEntity(entityId, new global::Frontend.GraphQL.State.IngredientEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"id\")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, \"name\"))));\r\n                }\r\n\r\n                return entityId;\r\n            }\r\n\r\n            throw new global::System.NotSupportedException();\r\n        }\r\n\r\n        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)\r\n        {\r\n            if (!obj.HasValue)\r\n            {\r\n                throw new global::System.ArgumentNullException();\r\n            }\r\n\r\n            return _iDParser.Parse(obj.Value.GetString()!);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class AddIngredientPayloadData\r\n    {\r\n        public AddIngredientPayloadData(global::System.String __typename, global::System.Int32? numUids = default !)\r\n        {\r\n            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));\r\n            NumUids = numUids;\r\n        }\r\n\r\n        public global::System.String __typename { get; }\r\n\r\n        public global::System.Int32? NumUids { get; }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class ConferenceClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer\r\n    {\r\n        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()\r\n        {Indented = false};\r\n        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)\r\n        {\r\n            global::System.String __typename = obj.GetProperty(\"__typename\").GetString()!;\r\n            return __typename switch\r\n            {\r\n                \"Ingredient\" => ParseIngredientEntityId(obj, __typename),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        public global::System.String Format(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            return entityId.Name switch\r\n            {\r\n                \"Ingredient\" => FormatIngredientEntityId(entityId),\r\n                _ => throw new global::System.NotSupportedException()};\r\n        }\r\n\r\n        private global::StrawberryShake.EntityId ParseIngredientEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)\r\n        {\r\n            return new global::StrawberryShake.EntityId(type, obj.GetProperty(\"id\").GetString()!);\r\n        }\r\n\r\n        private global::System.String FormatIngredientEntityId(global::StrawberryShake.EntityId entityId)\r\n        {\r\n            using var writer = new global::StrawberryShake.Internal.ArrayWriter();\r\n            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);\r\n            jsonWriter.WriteStartObject();\r\n            jsonWriter.WriteString(\"__typename\", entityId.Name);\r\n            jsonWriter.WriteString(\"id\", (global::System.String)entityId.Value);\r\n            jsonWriter.WriteEndObject();\r\n            jsonWriter.Flush();\r\n            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);\r\n        }\r\n    }\r\n\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public partial class ConferenceClientStoreAccessor : global::StrawberryShake.StoreAccessor\r\n    {\r\n        public ConferenceClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)\r\n        {\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Microsoft.Extensions.DependencyInjection\r\n{\r\n    [global::System.CodeDom.Compiler.GeneratedCode(\"StrawberryShake\", \"12.3.2.0\")]\r\n    public static partial class ConferenceClientServiceCollectionExtensions\r\n    {\r\n        public static global::StrawberryShake.IClientBuilder<global::Frontend.GraphQL.State.ConferenceClientStoreAccessor> AddConferenceClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>\r\n            {\r\n                ConfigureClientDefault(sp, serviceCollection, strategy);\r\n                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Frontend.GraphQL.State.ConferenceClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.AddIngredientMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.GetIngredientsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.ConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.IConferenceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));\r\n            return new global::StrawberryShake.ClientBuilder<global::Frontend.GraphQL.State.ConferenceClientStoreAccessor>(\"ConferenceClient\", services, serviceCollection);\r\n        }\r\n\r\n        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)\r\n        {\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>\r\n            {\r\n                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);\r\n                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient(\"ConferenceClient\"));\r\n            });\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Frontend.GraphQL.State.IngredientEntity, global::Frontend.GraphQL.GetIngredients_QueryIngredient_Ingredient>, global::Frontend.GraphQL.State.GetIngredients_QueryIngredient_IngredientFromIngredientEntityMapper>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IAddIngredientResult>, global::Frontend.GraphQL.State.AddIngredientResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IAddIngredientResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.IAddIngredientMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IAddIngredientResult>, global::Frontend.GraphQL.State.AddIngredientBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Frontend.GraphQL.IAddIngredientResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IAddIngredientResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IAddIngredientResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Frontend.GraphQL.AddIngredientMutation>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Frontend.GraphQL.IAddIngredientMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.AddIngredientMutation>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IGetIngredientsResult>, global::Frontend.GraphQL.State.GetIngredientsResultFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Frontend.GraphQL.IGetIngredientsResult>>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.IGetIngredientsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IGetIngredientsResult>, global::Frontend.GraphQL.State.GetIngredientsBuilder>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Frontend.GraphQL.IGetIngredientsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IGetIngredientsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Frontend.GraphQL.IGetIngredientsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Frontend.GraphQL.GetIngredientsQuery>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Frontend.GraphQL.IGetIngredientsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.GetIngredientsQuery>(sp));\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Frontend.GraphQL.State.ConferenceClientEntityIdFactory>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Frontend.GraphQL.ConferenceClient>(services);\r\n            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Frontend.GraphQL.IConferenceClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Frontend.GraphQL.ConferenceClient>(sp));\r\n            return services;\r\n        }\r\n\r\n        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable\r\n        {\r\n            private readonly System.IServiceProvider _provider;\r\n            public ClientServiceProvider(System.IServiceProvider provider)\r\n            {\r\n                _provider = provider;\r\n            }\r\n\r\n            public object? GetService(System.Type serviceType)\r\n            {\r\n                return _provider.GetService(serviceType);\r\n            }\r\n\r\n            public void Dispose()\r\n            {\r\n                if (_provider is System.IDisposable d)\r\n                {\r\n                    d.Dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n","Kind":0,"Hash":null,"Path":null}]